{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///external_api.min.js","webpack:///webpack/bootstrap 70073e7727391789c8ec","webpack:///./~/jitsi-meet-logger/lib/Logger.js","webpack:///./~/jitsi-meet-logger/lib/index.js","webpack:///./modules/API/external/external_api.js","webpack:///./modules/API/constants.js","webpack:///./modules/API/external/index.js","webpack:///./modules/transport/PostMessageTransportBackend.js","webpack:///./modules/transport/Transport.js","webpack:///./modules/transport/constants.js","webpack:///./modules/transport/index.js","webpack:///./modules/util/helpers.js","webpack:///./react/features/base/config/parseURLParams.js","webpack:///./~/events/events.js","webpack:///./~/jitsi-meet-logger/lib/LogCollector.js","webpack:///./~/postis/src/index.js"],"names":["root","factory","exports","module","define","amd","JitsiMeetExternalAPI","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","default","object","property","prototype","hasOwnProperty","p","s","getCallerInfo","callerInfo","methodName","fileLocation","line","column","error","Error","stack","split","length","match","indexOf","substr","log","logger","arguments","level","args","Array","slice","levels","transports","globalTransports","concat","t","bind","id","apply","Logger","format","methods","keys","trace","debug","info","warn","consoleTransport","console","addGlobalTransport","transport","push","removeGlobalTransport","transportIdx","splice","setLevel","TRACE","DEBUG","INFO","LOG","WARN","ERROR","LogCollector","idLoggers","loggers","curLevel","getLogger","setLogLevelById","setLogLevel","__webpack_exports__","__filename","_objectWithoutProperties","obj","target","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","writable","setPrototypeOf","__proto__","changeParticipantNumber","APIInstance","number","numberOfParticipants","configToURLParamsArray","config","params","key","encodeURIComponent","JSON","stringify","e","generateURL","domain","options","configOverwrite","interfaceConfigOverwrite","jwt","noSSL","roomName","url","configURLParams","join","interfaceConfigURLParams","__WEBPACK_IMPORTED_MODULE_0_events__","__WEBPACK_IMPORTED_MODULE_0_events___default","__WEBPACK_IMPORTED_MODULE_1__transport__","_createClass","defineProperties","props","descriptor","protoProps","staticProps","commands","avatarUrl","displayName","email","hangup","toggleAudio","toggleChat","toggleContactList","toggleFilmStrip","toggleShareScreen","toggleVideo","events","display-name-change","incoming-message","outgoing-message","participant-joined","participant-left","video-ready-to-close","video-conference-joined","video-conference-left","MIN_HEIGHT","MIN_WIDTH","_EventEmitter","width","height","parentNode","document","body","_this","getPrototypeOf","_createIFrame","Math","max","_transport","a","backend","b","postisOptions","scope","window","frame","contentWindow","_setupListeners","iframeHolder","appendChild","createElement","style","frameName","src","setAttribute","_this2","on","_ref","data","eventName","emit","event","listener","listeners","addEventListener","dispose","removeAllListeners","removeChild","_len","_key","sendEvent","commandList","executeCommand","eventList","_this3","forEach","removeEventListener","API_ID","__WEBPACK_IMPORTED_MODULE_0__react_features_base_config_parseURLParams__","location","jitsi_meet_external_api_id","__WEBPACK_IMPORTED_MODULE_0_postis__","__WEBPACK_IMPORTED_MODULE_0_postis___default","_extends","assign","source","DEFAULT_POSTIS_OPTIONS","opener","parent","LEGACY_INCOMING_METHODS","LEGACY_OUTGOING_METHODS","POSTIS_METHOD_NAME","PostMessageTransportBackend","enableLegacyFormat","postis","Postis","_enableLegacyFormat","method","listen","_legacyMessageReceivedCallback","_receiveCallback","message","_ref2","send","destroy","_sendLegacyMessage","callback","_toConsumableArray","arr","isArray","arr2","from","__WEBPACK_IMPORTED_MODULE_0__constants__","Transport","_listeners","Map","_requestID","_responseHandlers","_unprocessedMessages","Set","addListener","setBackend","_backend","type","handler","delete","result","clear","_disposeBackend","listenersForEvent","isProcessed","size","add","set","request","Promise","reject","resolve","setReceiveCallback","_onMessageReceived","MESSAGE_TYPE_EVENT","MESSAGE_TYPE_REQUEST","MESSAGE_TYPE_RESPONSE","__WEBPACK_IMPORTED_MODULE_0__API_constants__","__WEBPACK_IMPORTED_MODULE_1__util_helpers__","__WEBPACK_IMPORTED_MODULE_2__PostMessageTransportBackend__","__WEBPACK_IMPORTED_MODULE_3__Transport__","setExternalTransportBackend","externalTransportBackend","getJitsiMeetGlobalNS","JitsiMeetJS","app","parseURLParams","dontParse","paramStr","search","hash","part","param","parse","decodeURIComponent","replace","msg","String","onerror","EventEmitter","_events","_maxListeners","isFunction","arg","isNumber","isObject","isUndefined","defaultMaxListeners","setMaxListeners","isNaN","er","len","err","context","newListener","warned","once","g","removeListener","fired","list","position","listenerCount","evlistener","emitter","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","queue","totalLen","outputCache","someObject","formatLogMessage","prevMessage","text","count","_flush","start","_reschedulePublishInterval","clearTimeout","setTimeout","flush","force","reschedule","isReady","cachedQueue","storeLogs","stop","readynessCheck","targetWindow","windowForEventListening","sendBuffer","listenBuffer","ready","listenersForMethod","listenBufferForMethod","j","opts","postMessage","clearInterval","readyCheckID","Date","random","setInterval"],"mappings":"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","file":"external_api.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetExternalAPI\"] = factory();\n\telse\n\t\troot[\"JitsiMeetExternalAPI\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetExternalAPI\"] = factory();\n\telse\n\t\troot[\"JitsiMeetExternalAPI\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/libs/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 4);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 1) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo = getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            l.bind(t, logger.id? \"[\" + logger.id + \"]\" : \"\", \"<\" + callerInfo.methodName + \">: \")\n                .apply(t, args);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param format optional (NOT implemented) string.\n */\nfunction Logger(level, id, transports, format) {\n    this.id = id;\n    this.format = format;\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = __webpack_require__(0);\nvar LogCollector = __webpack_require__(12);\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, format) {\n        var logger = new Logger(curLevel, id, transports, format);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* WEBPACK VAR INJECTION */(function(__filename) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_events__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_events___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_events__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__transport__ = __webpack_require__(8);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\nvar logger = __webpack_require__(1).getLogger(__filename);\n\n/**\n * Maps the names of the commands expected by the API with the name of the\n * commands expected by jitsi-meet\n */\nvar commands = {\n    avatarUrl: 'avatar-url',\n    displayName: 'display-name',\n    email: 'email',\n    hangup: 'video-hangup',\n    toggleAudio: 'toggle-audio',\n    toggleChat: 'toggle-chat',\n    toggleContactList: 'toggle-contact-list',\n    toggleFilmStrip: 'toggle-film-strip',\n    toggleShareScreen: 'toggle-share-screen',\n    toggleVideo: 'toggle-video'\n};\n\n/**\n * Maps the names of the events expected by the API with the name of the\n * events expected by jitsi-meet\n */\nvar events = {\n    'display-name-change': 'displayNameChange',\n    'incoming-message': 'incomingMessage',\n    'outgoing-message': 'outgoingMessage',\n    'participant-joined': 'participantJoined',\n    'participant-left': 'participantLeft',\n    'video-ready-to-close': 'readyToClose',\n    'video-conference-joined': 'videoConferenceJoined',\n    'video-conference-left': 'videoConferenceLeft'\n};\n\n/**\n * Last id of api object\n * @type {number}\n */\nvar id = 0;\n\n/**\n * The minimum height for the Jitsi Meet frame\n * @type {number}\n */\nvar MIN_HEIGHT = 300;\n\n/**\n * The minimum width for the Jitsi Meet frame\n * @type {number}\n */\nvar MIN_WIDTH = 790;\n\n/**\n * Adds given number to the numberOfParticipants property of given APIInstance.\n *\n * @param {JitsiMeetExternalAPI} APIInstance - The instance of the API.\n * @param {int} number - The number of participants to be added to\n * numberOfParticipants property (this parameter can be negative number if the\n * numberOfParticipants should be decreased).\n * @returns {void}\n */\nfunction changeParticipantNumber(APIInstance, number) {\n    APIInstance.numberOfParticipants += number;\n}\n\n/**\n * Generates array with URL params based on the passed config object that will\n * be used for the Jitsi Meet URL generation.\n *\n * @param {Object} config - The config object.\n * @returns {Array<string>} The array with URL param strings.\n */\nfunction configToURLParamsArray() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var params = [];\n\n    for (var key in config) {\n        // eslint-disable-line guard-for-in\n        try {\n            params.push(key + '=' + encodeURIComponent(JSON.stringify(config[key])));\n        } catch (e) {\n            console.warn('Error encoding ' + key + ': ' + e);\n        }\n    }\n\n    return params;\n}\n\n/**\n * Generates the URL for the iframe.\n *\n * @param {string} domain - The domain name of the server that hosts the\n * conference.\n * @param {string} [options] - Another optional parameters.\n * @param {Object} [options.configOverwrite] - Object containing configuration\n * options defined in config.js to be overridden.\n * @param {Object} [options.interfaceConfigOverwrite] - Object containing\n * configuration options defined in interface_config.js to be overridden.\n * @param {string} [options.jwt] - The JWT token if needed by jitsi-meet for\n * authentication.\n * @param {boolean} [options.noSsl] - If the value is true https won't be used.\n * @param {string} [options.roomName] - The name of the room to join.\n * @returns {string} The URL.\n */\nfunction generateURL(domain) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var configOverwrite = options.configOverwrite,\n        interfaceConfigOverwrite = options.interfaceConfigOverwrite,\n        jwt = options.jwt,\n        noSSL = options.noSSL,\n        roomName = options.roomName;\n\n\n    var url = (noSSL ? 'http' : 'https') + '://' + domain + '/' + (roomName || '');\n\n    if (jwt) {\n        url += '?jwt=' + jwt;\n    }\n\n    url += '#jitsi_meet_external_api_id=' + id;\n\n    var configURLParams = configToURLParamsArray(configOverwrite);\n\n    if (configURLParams.length) {\n        url += '&config.' + configURLParams.join('&config.');\n    }\n\n    var interfaceConfigURLParams = configToURLParamsArray(interfaceConfigOverwrite);\n\n    if (interfaceConfigURLParams.length) {\n        url += '&interfaceConfig.' + interfaceConfigURLParams.join('&interfaceConfig.');\n    }\n\n    return url;\n}\n\n/**\n * The IFrame API interface class.\n */\n\nvar JitsiMeetExternalAPI = function (_EventEmitter) {\n    _inherits(JitsiMeetExternalAPI, _EventEmitter);\n\n    /**\n     * Constructs new API instance. Creates iframe and loads Jitsi Meet in it.\n     *\n     * @param {string} domain - The domain name of the server that hosts the\n     * conference.\n     * @param {string} [roomName] - The name of the room to join.\n     * @param {number} [width] - Width of the iframe.\n     * @param {number} [height] - Height of the iframe.\n     * @param {DOMElement} [parentNode] - The node that will contain the\n     * iframe.\n     * @param {Object} [configOverwrite] - Object containing configuration\n     * options defined in config.js to be overridden.\n     * @param {Object} [interfaceConfigOverwrite] - Object containing\n     * configuration options defined in interface_config.js to be overridden.\n     * @param {boolean} [noSSL] - If the value is true https won't be used.\n     * @param {string} [jwt] - The JWT token if needed by jitsi-meet for\n     * authentication.\n     */\n    function JitsiMeetExternalAPI(domain) {\n        var roomName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n        var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : MIN_WIDTH;\n        var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : MIN_HEIGHT;\n        var parentNode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : document.body;\n        var configOverwrite = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n        var interfaceConfigOverwrite = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n        var noSSL = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n        var jwt = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : undefined;\n\n        _classCallCheck(this, JitsiMeetExternalAPI);\n\n        var _this = _possibleConstructorReturn(this, (JitsiMeetExternalAPI.__proto__ || Object.getPrototypeOf(JitsiMeetExternalAPI)).call(this));\n\n        _this.parentNode = parentNode;\n        _this.url = generateURL(domain, {\n            configOverwrite: configOverwrite,\n            interfaceConfigOverwrite: interfaceConfigOverwrite,\n            jwt: jwt,\n            noSSL: noSSL,\n            roomName: roomName\n        });\n        _this._createIFrame(Math.max(height, MIN_HEIGHT), Math.max(width, MIN_WIDTH));\n        _this._transport = new __WEBPACK_IMPORTED_MODULE_1__transport__[\"a\" /* Transport */]({\n            backend: new __WEBPACK_IMPORTED_MODULE_1__transport__[\"b\" /* PostMessageTransportBackend */]({\n                postisOptions: {\n                    scope: 'jitsi_meet_external_api_' + id,\n                    window: _this.frame.contentWindow\n                }\n            })\n        });\n        _this.numberOfParticipants = 1;\n        _this._setupListeners();\n        id++;\n        return _this;\n    }\n\n    /**\n     * Creates the iframe element.\n     *\n     * @param {number} height - The height of the iframe.\n     * @param {number} width - The with of the iframe.\n     * @returns {void}\n     *\n     * @private\n     */\n\n\n    _createClass(JitsiMeetExternalAPI, [{\n        key: '_createIFrame',\n        value: function _createIFrame(height, width) {\n            this.iframeHolder = this.parentNode.appendChild(document.createElement('div'));\n            this.iframeHolder.id = 'jitsiConference' + id;\n            this.iframeHolder.style.width = width + 'px';\n            this.iframeHolder.style.height = height + 'px';\n\n            this.frameName = 'jitsiConferenceFrame' + id;\n\n            this.frame = document.createElement('iframe');\n            this.frame.src = this.url;\n            this.frame.name = this.frameName;\n            this.frame.id = this.frameName;\n            this.frame.width = '100%';\n            this.frame.height = '100%';\n            this.frame.setAttribute('allowFullScreen', 'true');\n            this.frame = this.iframeHolder.appendChild(this.frame);\n        }\n\n        /**\n         * Setups listeners that are used internally for JitsiMeetExternalAPI.\n         *\n         * @returns {void}\n         *\n         * @private\n         */\n\n    }, {\n        key: '_setupListeners',\n        value: function _setupListeners() {\n            var _this2 = this;\n\n            this._transport.on('event', function (_ref) {\n                var name = _ref.name,\n                    data = _objectWithoutProperties(_ref, ['name']);\n\n                if (name === 'participant-joined') {\n                    changeParticipantNumber(_this2, 1);\n                } else if (name === 'participant-left') {\n                    changeParticipantNumber(_this2, -1);\n                }\n\n                var eventName = events[name];\n\n                if (eventName) {\n                    _this2.emit(eventName, data);\n\n                    return true;\n                }\n\n                return false;\n            });\n        }\n\n        /**\n         * Adds event listener to Meet Jitsi.\n         *\n         * @param {string} event - The name of the event.\n         * @param {Function} listener - The listener.\n         * @returns {void}\n         *\n         * @deprecated\n         * NOTE: This method is not removed for backward comatability purposes.\n         */\n\n    }, {\n        key: 'addEventListener',\n        value: function addEventListener(event, listener) {\n            this.on(event, listener);\n        }\n\n        /**\n         * Adds event listeners to Meet Jitsi.\n         *\n         * @param {Object} listeners - The object key should be the name of\n         * the event and value - the listener.\n         * Currently we support the following\n         * events:\n         * incomingMessage - receives event notifications about incoming\n         * messages. The listener will receive object with the following structure:\n         * {{\n         *  'from': from,//JID of the user that sent the message\n         *  'nick': nick,//the nickname of the user that sent the message\n         *  'message': txt//the text of the message\n         * }}\n         * outgoingMessage - receives event notifications about outgoing\n         * messages. The listener will receive object with the following structure:\n         * {{\n         *  'message': txt//the text of the message\n         * }}\n         * displayNameChanged - receives event notifications about display name\n         * change. The listener will receive object with the following structure:\n         * {{\n         * jid: jid,//the JID of the participant that changed his display name\n         * displayname: displayName //the new display name\n         * }}\n         * participantJoined - receives event notifications about new participant.\n         * The listener will receive object with the following structure:\n         * {{\n         * jid: jid //the jid of the participant\n         * }}\n         * participantLeft - receives event notifications about the participant that\n         * left the room.\n         * The listener will receive object with the following structure:\n         * {{\n         * jid: jid //the jid of the participant\n         * }}\n         * video-conference-joined - receives event notifications about the local\n         * user has successfully joined the video conference.\n         * The listener will receive object with the following structure:\n         * {{\n         * roomName: room //the room name of the conference\n         * }}\n         * video-conference-left - receives event notifications about the local user\n         * has left the video conference.\n         * The listener will receive object with the following structure:\n         * {{\n         * roomName: room //the room name of the conference\n         * }}\n         * readyToClose - all hangup operations are completed and Jitsi Meet is\n         * ready to be disposed.\n         * @returns {void}\n         *\n         * @deprecated\n         * NOTE: This method is not removed for backward comatability purposes.\n         */\n\n    }, {\n        key: 'addEventListeners',\n        value: function addEventListeners(listeners) {\n            for (var event in listeners) {\n                // eslint-disable-line guard-for-in\n                this.addEventListener(event, listeners[event]);\n            }\n        }\n\n        /**\n         * Removes the listeners and removes the Jitsi Meet frame.\n         *\n         * @returns {void}\n         */\n\n    }, {\n        key: 'dispose',\n        value: function dispose() {\n            this._transport.dispose();\n            this.removeAllListeners();\n            if (this.iframeHolder) {\n                this.iframeHolder.parentNode.removeChild(this.iframeHolder);\n            }\n        }\n\n        /**\n         * Executes command. The available commands are:\n         * displayName - sets the display name of the local participant to the value\n         * passed in the arguments array.\n         * toggleAudio - mutes / unmutes audio with no arguments.\n         * toggleVideo - mutes / unmutes video with no arguments.\n         * toggleFilmStrip - hides / shows the filmstrip with no arguments.\n         * If the command doesn't require any arguments the parameter should be set\n         * to empty array or it may be omitted.\n         *\n         * @param {string} name - The name of the command.\n         * @returns {void}\n         */\n\n    }, {\n        key: 'executeCommand',\n        value: function executeCommand(name) {\n            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                args[_key - 1] = arguments[_key];\n            }\n\n            if (!(name in commands)) {\n                logger.error('Not supported command name.');\n\n                return;\n            }\n            this._transport.sendEvent({\n                data: args,\n                name: commands[name]\n            });\n        }\n\n        /**\n         * Executes commands. The available commands are:\n         * displayName - sets the display name of the local participant to the value\n         * passed in the arguments array.\n         * toggleAudio - mutes / unmutes audio. no arguments\n         * toggleVideo - mutes / unmutes video. no arguments\n         * toggleFilmStrip - hides / shows the filmstrip. no arguments\n         * toggleChat - hides / shows chat. no arguments.\n         * toggleContactList - hides / shows contact list. no arguments.\n         * toggleShareScreen - starts / stops screen sharing. no arguments.\n         *\n         * @param {Object} commandList - The object with commands to be executed.\n         * The keys of the object are the commands that will be executed and the\n         * values are the arguments for the command.\n         * @returns {void}\n         */\n\n    }, {\n        key: 'executeCommands',\n        value: function executeCommands(commandList) {\n            for (var key in commandList) {\n                // eslint-disable-line guard-for-in\n                this.executeCommand(key, commandList[key]);\n            }\n        }\n\n        /**\n         * Returns the number of participants in the conference. The local\n         * participant is included.\n         *\n         * @returns {int} The number of participants in the conference.\n         */\n\n    }, {\n        key: 'getNumberOfParticipants',\n        value: function getNumberOfParticipants() {\n            return this.numberOfParticipants;\n        }\n\n        /**\n         * Removes event listener.\n         *\n         * @param {string} event - The name of the event.\n         * @returns {void}\n         *\n         * @deprecated\n         * NOTE: This method is not removed for backward comatability purposes.\n         */\n\n    }, {\n        key: 'removeEventListener',\n        value: function removeEventListener(event) {\n            this.removeAllListeners(event);\n        }\n\n        /**\n         * Removes event listeners.\n         *\n         * @param {Array<string>} eventList - Array with the names of the events.\n         * @returns {void}\n         *\n         * @deprecated\n         * NOTE: This method is not removed for backward comatability purposes.\n         */\n\n    }, {\n        key: 'removeEventListeners',\n        value: function removeEventListeners(eventList) {\n            var _this3 = this;\n\n            eventList.forEach(function (event) {\n                return _this3.removeEventListener(event);\n            });\n        }\n    }]);\n\n    return JitsiMeetExternalAPI;\n}(__WEBPACK_IMPORTED_MODULE_0_events___default.a);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (JitsiMeetExternalAPI);\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, \"modules/API/external/external_api.js\"))\n\n/***/ }),\n/* 3 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return API_ID; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__react_features_base_config_parseURLParams__ = __webpack_require__(10);\n// XXX The function parseURLParams is exported by the feature base/config (as\n// defined in the terminology of react/). However, this file is (very likely)\n// bundled in external_api in addition to app.bundle and, consequently, it is\n// best to import as little as possible here (rather than the whole feature\n// base/config) in order to minimize the amount of source code bundled into\n// multiple bundles.\n\n\n/**\n * JitsiMeetExternalAPI id - unique for a webpage.\n */\nvar API_ID = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__react_features_base_config_parseURLParams__[\"a\" /* default */])(window.location).jitsi_meet_external_api_id;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// For legacy purposes, preserve the UMD of the public API of Jitsi Meet\n// external API (a.k.a. JitsiMeetExternalAPI).\nmodule.exports = __webpack_require__(2).default;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_postis__ = __webpack_require__(13);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_postis___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_postis__);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\n\n/**\n * The default options for postis.\n *\n * @type {Object}\n */\nvar DEFAULT_POSTIS_OPTIONS = {\n    window: window.opener || window.parent\n};\n\n/**\n * The list of methods of incoming postis messages that we have to support for\n * backward compatibility for the users that are directly sending messages to\n * Jitsi Meet (without using external_api.js)\n *\n * @type {string[]}\n */\nvar LEGACY_INCOMING_METHODS = ['avatar-url', 'display-name', 'email', 'toggle-audio', 'toggle-chat', 'toggle-contact-list', 'toggle-film-strip', 'toggle-share-screen', 'toggle-video', 'video-hangup'];\n\n/**\n * The list of methods of outgoing postis messages that we have to support for\n * backward compatibility for the users that are directly listening to the\n * postis messages send by Jitsi Meet(without using external_api.js).\n *\n * @type {string[]}\n */\nvar LEGACY_OUTGOING_METHODS = ['display-name-change', 'incoming-message', 'outgoing-message', 'participant-joined', 'participant-left', 'video-conference-joined', 'video-conference-left', 'video-ready-to-close'];\n\n/**\n * The postis method used for all messages.\n *\n * @type {string}\n */\nvar POSTIS_METHOD_NAME = 'message';\n\n/**\n * Implements message transport using the postMessage API.\n */\n\nvar PostMessageTransportBackend = function () {\n    /**\n     * Creates new PostMessageTransportBackend instance.\n     *\n     * @param {Object} options - Optional parameters for configuration of the\n     * transport.\n     */\n    function PostMessageTransportBackend() {\n        var _this = this;\n\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            enableLegacyFormat = _ref.enableLegacyFormat,\n            postisOptions = _ref.postisOptions;\n\n        _classCallCheck(this, PostMessageTransportBackend);\n\n        this.postis = __WEBPACK_IMPORTED_MODULE_0_postis___default()(_extends({}, DEFAULT_POSTIS_OPTIONS, postisOptions));\n\n        /**\n         * If true PostMessageTransportBackend will process and send messages\n         * using the legacy format and in the same time the current format.\n         * Otherwise all messages (outgoing and incoming) that are using the\n         * legacy format will be ignored.\n         *\n         * @type {boolean}\n         */\n        this._enableLegacyFormat = enableLegacyFormat;\n\n        if (this._enableLegacyFormat) {\n            // backward compatibility\n            LEGACY_INCOMING_METHODS.forEach(function (method) {\n                return _this.postis.listen(method, function (params) {\n                    return _this._legacyMessageReceivedCallback(method, params);\n                });\n            });\n        }\n\n        this._receiveCallback = function () {\n            // Do nothing until a callback is set by the consumer of\n            // PostMessageTransportBackend via setReceiveCallback.\n        };\n\n        this.postis.listen(POSTIS_METHOD_NAME, function (message) {\n            return _this._receiveCallback(message);\n        });\n    }\n\n    /**\n     * Handles incoming legacy postis messages.\n     *\n     * @param {string} method - The method property from the postis message.\n     * @param {Any} params - The params property from the postis message.\n     * @returns {void}\n     */\n\n\n    _createClass(PostMessageTransportBackend, [{\n        key: '_legacyMessageReceivedCallback',\n        value: function _legacyMessageReceivedCallback(method) {\n            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n            this._receiveCallback({\n                data: {\n                    name: method,\n                    data: params\n                }\n            });\n        }\n\n        /**\n         * Sends the passed message via postis using the old format.\n         *\n         * @param {Object} legacyMessage - The message to be sent.\n         * @returns {void}\n         */\n\n    }, {\n        key: '_sendLegacyMessage',\n        value: function _sendLegacyMessage(_ref2) {\n            var name = _ref2.name,\n                data = _objectWithoutProperties(_ref2, ['name']);\n\n            if (name && LEGACY_OUTGOING_METHODS.indexOf(name) !== -1) {\n                this.postis.send({\n                    method: name,\n                    params: data\n                });\n            }\n        }\n\n        /**\n         * Disposes the allocated resources.\n         *\n         * @returns {void}\n         */\n\n    }, {\n        key: 'dispose',\n        value: function dispose() {\n            this.postis.destroy();\n        }\n\n        /**\n         * Sends the passed message.\n         *\n         * @param {Object} message - The message to be sent.\n         * @returns {void}\n         */\n\n    }, {\n        key: 'send',\n        value: function send(message) {\n            this.postis.send({\n                method: POSTIS_METHOD_NAME,\n                params: message\n            });\n\n            if (this._enableLegacyFormat) {\n                // For the legacy use case we don't need any new fields defined in\n                // Transport class. That's why we are passing only the original\n                // object passed by the consumer of the Transport class which is\n                // message.data.\n                this._sendLegacyMessage(message.data);\n            }\n        }\n\n        /**\n         * Sets the callback for receiving data.\n         *\n         * @param {Function} callback - The new callback.\n         * @returns {void}\n         */\n\n    }, {\n        key: 'setReceiveCallback',\n        value: function setReceiveCallback(callback) {\n            this._receiveCallback = callback;\n        }\n    }]);\n\n    return PostMessageTransportBackend;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (PostMessageTransportBackend);\n\n/***/ }),\n/* 6 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__constants__ = __webpack_require__(7);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\n\n/**\n * Stores the currnet transport backend that have to be used. Also implements\n * request/response mechanism.\n */\n\nvar Transport = function () {\n    /**\n     * Creates new instance.\n     *\n     * @param {Object} options - Optional parameters for configuration of the\n     * transport backend.\n     */\n    function Transport() {\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            backend = _ref.backend;\n\n        _classCallCheck(this, Transport);\n\n        /**\n         * Maps an event name and listener that have been added to the Transport\n         * instance.\n         *\n         * @type {Map<string, Function>}\n         */\n        this._listeners = new Map();\n\n        /**\n         * The request ID counter used for the id property of the request. This\n         * property is used to match the responses with the request.\n         *\n         * @type {number}\n         */\n        this._requestID = 0;\n\n        /**\n         * Maps an IDs of the requests and handlers that will process the\n         * responses of those requests.\n         *\n         * @type {Map<number, Function>}\n         */\n        this._responseHandlers = new Map();\n\n        /**\n         * A set with the events and requests that were received but not\n         * processed by any listener. They are later passed on every new\n         * listener until they are processed.\n         *\n         * @type {Set<Object>}\n         */\n        this._unprocessedMessages = new Set();\n\n        /**\n         * Alias.\n         */\n        this.addListener = this.on;\n\n        if (backend) {\n            this.setBackend(backend);\n        }\n    }\n\n    /**\n     * Disposes the current transport backend.\n     *\n     * @returns {void}\n     */\n\n\n    _createClass(Transport, [{\n        key: '_disposeBackend',\n        value: function _disposeBackend() {\n            if (this._backend) {\n                this._backend.dispose();\n                this._backend = null;\n            }\n        }\n\n        /**\n         * Handles incoming messages from the transport backend.\n         *\n         * @param {Object} message - The message.\n         * @returns {void}\n         */\n\n    }, {\n        key: '_onMessageReceived',\n        value: function _onMessageReceived(message) {\n            var _this = this;\n\n            if (message.type === __WEBPACK_IMPORTED_MODULE_0__constants__[\"a\" /* MESSAGE_TYPE_RESPONSE */]) {\n                var handler = this._responseHandlers.get(message.id);\n\n                if (handler) {\n                    handler(message);\n                    this._responseHandlers.delete(message.id);\n                }\n            } else if (message.type === __WEBPACK_IMPORTED_MODULE_0__constants__[\"b\" /* MESSAGE_TYPE_REQUEST */]) {\n                this.emit('request', message.data, function (result, error) {\n                    _this._backend.send({\n                        type: __WEBPACK_IMPORTED_MODULE_0__constants__[\"a\" /* MESSAGE_TYPE_RESPONSE */],\n                        error: error,\n                        id: message.id,\n                        result: result\n                    });\n                });\n            } else {\n                this.emit('event', message.data);\n            }\n        }\n\n        /**\n         * Disposes the allocated resources.\n         *\n         * @returns {void}\n         */\n\n    }, {\n        key: 'dispose',\n        value: function dispose() {\n            this._responseHandlers.clear();\n            this._unprocessedMessages.clear();\n            this.removeAllListeners();\n            this._disposeBackend();\n        }\n\n        /**\n         * Calls each of the listeners registered for the event named eventName, in\n         * the order they were registered, passing the supplied arguments to each.\n         *\n         * @param {string} eventName -  The name of the event.\n         * @returns {boolean} True if the event has been processed by any listener,\n         * false otherwise.\n         */\n\n    }, {\n        key: 'emit',\n        value: function emit(eventName) {\n            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                args[_key - 1] = arguments[_key];\n            }\n\n            var listenersForEvent = this._listeners.get(eventName);\n            var isProcessed = false;\n\n            if (listenersForEvent && listenersForEvent.size) {\n                listenersForEvent.forEach(function (listener) {\n                    isProcessed = listener.apply(undefined, args) || isProcessed;\n                });\n            }\n\n            if (!isProcessed) {\n                this._unprocessedMessages.add(args);\n            }\n\n            return isProcessed;\n        }\n\n        /**\n         * Adds the listener function to the listeners collection for the event\n         * named eventName.\n         *\n         * @param {string} eventName -  The name of the event.\n         * @param {Function} listener - The listener that will be added.\n         * @returns {Transport} References to the instance of Transport class, so\n         * that calls can be chained.\n         */\n\n    }, {\n        key: 'on',\n        value: function on(eventName, listener) {\n            var _this2 = this;\n\n            var listenersForEvent = this._listeners.get(eventName);\n\n            if (!listenersForEvent) {\n                listenersForEvent = new Set();\n                this._listeners.set(eventName, listenersForEvent);\n            }\n\n            listenersForEvent.add(listener);\n\n            this._unprocessedMessages.forEach(function (args) {\n                if (listener.apply(undefined, _toConsumableArray(args))) {\n                    _this2._unprocessedMessages.delete(args);\n                }\n            });\n\n            return this;\n        }\n\n        /**\n         * Removes all listeners, or those of the specified eventName.\n         *\n         * @param {string} [eventName] - The name of the event. If this parameter is\n         * not specified all listeners will be removed.\n         * @returns {Transport} References to the instance of Transport class, so\n         * that calls can be chained.\n         */\n\n    }, {\n        key: 'removeAllListeners',\n        value: function removeAllListeners(eventName) {\n            if (eventName) {\n                this._listeners.delete(eventName);\n            } else {\n                this._listeners.clear();\n            }\n\n            return this;\n        }\n\n        /**\n         * Removes the listener function from the listeners collection for the event\n         * named eventName.\n         *\n         * @param {string} eventName -  The name of the event.\n         * @param {Function} listener - The listener that will be removed.\n         * @returns {Transport} References to the instance of Transport class, so\n         * that calls can be chained.\n         */\n\n    }, {\n        key: 'removeListener',\n        value: function removeListener(eventName, listener) {\n            var listenersForEvent = this._listeners.get(eventName);\n\n            if (listenersForEvent) {\n                listenersForEvent.delete(listener);\n            }\n\n            return this;\n        }\n\n        /**\n         * Sends the passed event.\n         *\n         * @param {Object} event - The event to be sent.\n         * @returns {void}\n         */\n\n    }, {\n        key: 'sendEvent',\n        value: function sendEvent() {\n            var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            if (this._backend) {\n                this._backend.send({\n                    type: __WEBPACK_IMPORTED_MODULE_0__constants__[\"c\" /* MESSAGE_TYPE_EVENT */],\n                    data: event\n                });\n            }\n        }\n\n        /**\n         * Sending request.\n         *\n         * @param {Object} request - The request to be sent.\n         * @returns {Promise}\n         */\n\n    }, {\n        key: 'sendRequest',\n        value: function sendRequest(request) {\n            var _this3 = this;\n\n            if (!this._backend) {\n                return Promise.reject(new Error('No transport backend defined!'));\n            }\n\n            this._requestID++;\n\n            var id = this._requestID;\n\n            return new Promise(function (resolve, reject) {\n                _this3._responseHandlers.set(id, function (_ref2) {\n                    var error = _ref2.error,\n                        result = _ref2.result;\n\n                    if (typeof result !== 'undefined') {\n                        resolve(result);\n\n                        // eslint-disable-next-line no-negated-condition\n                    } else if (typeof error !== 'undefined') {\n                        reject(error);\n                    } else {\n                        // no response\n                        reject(new Error('Unexpected response format!'));\n                    }\n                });\n\n                _this3._backend.send({\n                    type: __WEBPACK_IMPORTED_MODULE_0__constants__[\"b\" /* MESSAGE_TYPE_REQUEST */],\n                    data: request,\n                    id: id\n                });\n            });\n        }\n\n        /**\n         * Changes the current backend transport.\n         *\n         * @param {Object} backend - The new transport backend that will be used.\n         * @returns {void}\n         */\n\n    }, {\n        key: 'setBackend',\n        value: function setBackend(backend) {\n            this._disposeBackend();\n\n            this._backend = backend;\n            this._backend.setReceiveCallback(this._onMessageReceived.bind(this));\n        }\n    }]);\n\n    return Transport;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Transport);\n\n/***/ }),\n/* 7 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return MESSAGE_TYPE_EVENT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return MESSAGE_TYPE_REQUEST; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return MESSAGE_TYPE_RESPONSE; });\n/**\n * The message type for events.\n *\n * @type {string}\n */\nvar MESSAGE_TYPE_EVENT = 'event';\n\n/**\n * The message type for requests.\n *\n * @type {string}\n */\nvar MESSAGE_TYPE_REQUEST = 'request';\n\n/**\n * The message type for responses.\n *\n * @type {string}\n */\nvar MESSAGE_TYPE_RESPONSE = 'response';\n\n/***/ }),\n/* 8 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export getJitsiMeetTransport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__API_constants__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_helpers__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__PostMessageTransportBackend__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Transport__ = __webpack_require__(6);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return __WEBPACK_IMPORTED_MODULE_2__PostMessageTransportBackend__[\"a\"]; });\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return __WEBPACK_IMPORTED_MODULE_3__Transport__[\"a\"]; });\n// FIXME: change to '../API' when we update to webpack2. If we do this now all\n// files from API modules will be included in external_api.js.\n\n\n\n\n\n\n\n\n/**\n * Option for the default low level transport.\n *\n * @type {Object}\n */\nvar postisOptions = {};\n\nif (typeof __WEBPACK_IMPORTED_MODULE_0__API_constants__[\"a\" /* API_ID */] === 'number') {\n    postisOptions.scope = 'jitsi_meet_external_api_' + __WEBPACK_IMPORTED_MODULE_0__API_constants__[\"a\" /* API_ID */];\n}\n\n/**\n * The instance of Transport class that will be used by Jitsi Meet.\n *\n * @type {Transport}\n */\nvar transport = void 0;\n\n/**\n * Returns the instance of Transport class that will be used by Jitsi Meet.\n *\n * @returns {Transport}\n */\nfunction getJitsiMeetTransport() {\n    if (!transport) {\n        transport = new __WEBPACK_IMPORTED_MODULE_3__Transport__[\"a\" /* default */]({\n            backend: new __WEBPACK_IMPORTED_MODULE_2__PostMessageTransportBackend__[\"a\" /* default */]({\n                enableLegacyFormat: true,\n                postisOptions: postisOptions\n            })\n        });\n    }\n\n    return transport;\n}\n\n/**\n * Sets the transport to passed transport.\n *\n * @param {Object} externalTransportBackend - The new transport.\n * @returns {void}\n */\n__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_helpers__[\"a\" /* getJitsiMeetGlobalNS */])().setExternalTransportBackend = function (externalTransportBackend) {\n    return transport.setBackend(externalTransportBackend);\n};\n\n/***/ }),\n/* 9 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(__filename) {/* unused harmony export createDeferred */\n/* unused harmony export debounce */\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = getJitsiMeetGlobalNS;\n/* unused harmony export reload */\n/* unused harmony export replace */\n/* unused harmony export reportError */\nvar logger = __webpack_require__(1).getLogger(__filename);\n\n/**\n * Create deferred object.\n *\n * @returns {{promise, resolve, reject}}\n */\nfunction createDeferred() {\n    var deferred = {};\n\n    deferred.promise = new Promise(function (resolve, reject) {\n        deferred.resolve = resolve;\n        deferred.reject = reject;\n    });\n\n    return deferred;\n}\n\n/**\n * Creates a debounced function that delays invoking func until after wait\n * milliseconds have elapsed since the last time the debounced function was\n * invoked.\n *\n * @param fn\n * @param wait\n * @param options\n * @returns {function(...[*])}\n */\nfunction debounce(fn) {\n    var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var leading = options.leading || false;\n    var trailing = typeof options.trailing === 'undefined' || options.trailing;\n    var called = false;\n\n    return function () {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        if (!called) {\n            leading && fn.apply(undefined, args);\n\n            setTimeout(function () {\n                called = false;\n                trailing && fn.apply(undefined, args);\n            }, wait);\n\n            called = true;\n        }\n    };\n}\n\n/**\n * Returns the namespace for all global variables, functions, etc that we need.\n *\n * @returns {Object} the namespace.\n *\n * NOTE: After React-ifying everything this should be the only global.\n */\nfunction getJitsiMeetGlobalNS() {\n    if (!window.JitsiMeetJS) {\n        window.JitsiMeetJS = {};\n    }\n    if (!window.JitsiMeetJS.app) {\n        window.JitsiMeetJS.app = {};\n    }\n    return window.JitsiMeetJS.app;\n}\n\n/**\n * Reload page.\n */\nfunction reload() {\n    window.location.reload();\n}\n\n/**\n * Redirects to a specific new URL by replacing the current location (in the\n * history).\n *\n * @param {string} url the URL pointing to the location where the user should\n * be redirected to.\n */\nfunction replace(url) {\n    window.location.replace(url);\n}\n\n/**\n * Prints the error and reports it to the global error handler.\n *\n * @param e {Error} the error\n * @param msg {string} [optional] the message printed in addition to the error\n */\nfunction reportError(e) {\n    var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n\n    logger.error(msg, e);\n    window.onerror && window.onerror(msg, null, null, null, e);\n}\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, \"modules/util/helpers.js\"))\n\n/***/ }),\n/* 10 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = parseURLParams;\n\n\n/**\n * Parses the parameters from the URL and returns them as a JS object.\n *\n * @param {string} url - The URL to parse.\n * @param {boolean} dontParse - If false or undefined some transformations\n * (for parsing the value as JSON) are going to be executed.\n * @param {string} source - Values - \"hash\"/\"search\" if \"search\" the parameters\n * will parsed from location.search otherwise from location.hash.\n * @returns {Object}\n */\nfunction parseURLParams(url) {\n    var dontParse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'hash';\n\n    var paramStr = source === 'search' ? url.search : url.hash;\n    var params = {};\n\n    // eslint-disable-next-line newline-per-chained-call\n    paramStr && paramStr.substr(1).split('&').forEach(function (part) {\n        var param = part.split('=');\n        var key = param[0];\n\n        if (!key) {\n            return;\n        }\n\n        var value = void 0;\n\n        try {\n            value = param[1];\n            if (!dontParse) {\n                value = JSON.parse(decodeURIComponent(value).replace(/\\\\&/, '&'));\n            }\n        } catch (e) {\n            var msg = 'Failed to parse URL parameter value: ' + String(value);\n\n            console.warn(msg, e);\n            window.onerror && window.onerror(msg, null, null, null, e);\n\n            return;\n        }\n        params[key] = value;\n    });\n\n    return params;\n}\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports) {\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = __webpack_require__(0);\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects\n        = options && options.stringifyObjects\n            ? options.stringifyObjects : false;\n    this.storeInterval\n        = options && options.storeInterval\n            ? options.storeInterval: 30000;\n    this.maxEntryLength\n        = options && options.maxEntryLength\n            ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function (logLevel) {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return \"[object with circular refs?]\";\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage\n= function (logLevel/*, arg1, arg2, arg3... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR)\n            && typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i != len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage\n            = this.queue.length ? this.queue[this.queue.length -1] : undefined;\n        // NOTE that typeof undefined is 'undefined'\n        var prevMessageText\n            = typeof prevMessage === 'object' ? prevMessage.text : prevMessage;\n        // Is it the same as the previous one ?\n        if (prevMessageText == msg) {\n            if (typeof prevMessage === 'object') {\n                prevMessage.count += 1;\n            } else {\n                this.queue[this.queue.length-1] = {\n                    text: msg,\n                    count: 2\n                }\n            }\n        } else {\n            this.queue.push(msg);\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID\n        = window.setTimeout(\n            this._flush.bind(\n                this, false /* do not force */, true /* reschedule */),\n            this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ )\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports) {\n\nfunction Postis(options) {\n  var scope = options.scope;\n  var targetWindow = options.window;\n  var windowForEventListening = options.windowForEventListening || window;\n  var listeners = {};\n  var sendBuffer = [];\n  var listenBuffer = {};\n  var ready = false;\n  var readyMethod = \"__ready__\";\n  var readynessCheck;\n\n  var listener = function(event) {\n    var data;\n    try {\n      data = JSON.parse(event.data);\n    } catch (e) {\n      return;\n    }\n\n    if (data.postis && data.scope === scope) {\n      var listenersForMethod = listeners[data.method];\n      if (listenersForMethod) {\n        for (var i = 0; i < listenersForMethod.length; i++) {\n          listenersForMethod[i].call(null, data.params);\n        }\n      } else {\n        listenBuffer[data.method] = listenBuffer[data.method] || [];\n        listenBuffer[data.method].push(data.params);\n      }\n    }\n  };\n\n  windowForEventListening.addEventListener(\"message\", listener, false);\n\n  var postis = {\n    listen: function (method, callback) {\n      listeners[method] = listeners[method] || [];\n      listeners[method].push(callback);\n\n      var listenBufferForMethod = listenBuffer[method];\n      if (listenBufferForMethod) {\n        var listenersForMethod = listeners[method];\n        for (var i = 0; i < listenersForMethod.length; i++) {\n          for (var j = 0; j < listenBufferForMethod.length; j++) {\n            listenersForMethod[i].call(null, listenBufferForMethod[j]);\n          }\n        }\n      }\n      delete listenBuffer[method];\n    },\n\n    send: function (opts) {\n      var method = opts.method;\n\n      if ((ready || opts.method === readyMethod) && (targetWindow && typeof targetWindow.postMessage === \"function\")) {\n        targetWindow.postMessage(JSON.stringify({\n          postis: true,\n          scope: scope,\n          method: method,\n          params: opts.params\n        }), \"*\");\n      } else {\n        sendBuffer.push(opts);\n      }\n    },\n\n    ready: function (callback) {\n      if (ready) {\n        callback();\n      } else {\n        setTimeout(function () { postis.ready(callback); }, 50);\n      }\n    },\n\n    destroy: function (callback) {\n      clearInterval(readynessCheck);\n      ready = false;\n      if (windowForEventListening && typeof windowForEventListening.removeEventListener === \"function\") {\n        windowForEventListening.removeEventListener(\"message\", listener);\n      }\n      callback && callback();\n    }\n  };\n\n  var readyCheckID = +new Date() + Math.random() + \"\";\n\n  readynessCheck = setInterval(function () {\n    postis.send({\n      method: readyMethod,\n      params: readyCheckID\n    });\n  }, 50);\n\n  postis.listen(readyMethod, function (id) {\n    if (id === readyCheckID) {\n      clearInterval(readynessCheck);\n      ready = true;\n\n      for (var i = 0; i < sendBuffer.length; i++) {\n        postis.send(sendBuffer[i]);\n      }\n      sendBuffer = [];\n    } else {\n      postis.send({\n        method: readyMethod,\n        params: id\n      });\n    }\n  });\n\n  return postis;\n}\n\nmodule.exports = Postis;\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// external_api.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/libs/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 70073e7727391789c8ec","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 1) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo = getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            l.bind(t, logger.id? \"[\" + logger.id + \"]\" : \"\", \"<\" + callerInfo.methodName + \">: \")\n                .apply(t, args);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param format optional (NOT implemented) string.\n */\nfunction Logger(level, id, transports, format) {\n    this.id = id;\n    this.format = format;\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/jitsi-meet-logger/lib/Logger.js\n// module id = 0\n// module chunks = 0","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, format) {\n        var logger = new Logger(curLevel, id, transports, format);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/jitsi-meet-logger/lib/index.js\n// module id = 1\n// module chunks = 0","import EventEmitter from 'events';\n\nimport {\n    PostMessageTransportBackend,\n    Transport\n} from '../../transport';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Maps the names of the commands expected by the API with the name of the\n * commands expected by jitsi-meet\n */\nconst commands = {\n    avatarUrl: 'avatar-url',\n    displayName: 'display-name',\n    email: 'email',\n    hangup: 'video-hangup',\n    toggleAudio: 'toggle-audio',\n    toggleChat: 'toggle-chat',\n    toggleContactList: 'toggle-contact-list',\n    toggleFilmStrip: 'toggle-film-strip',\n    toggleShareScreen: 'toggle-share-screen',\n    toggleVideo: 'toggle-video'\n};\n\n/**\n * Maps the names of the events expected by the API with the name of the\n * events expected by jitsi-meet\n */\nconst events = {\n    'display-name-change': 'displayNameChange',\n    'incoming-message': 'incomingMessage',\n    'outgoing-message': 'outgoingMessage',\n    'participant-joined': 'participantJoined',\n    'participant-left': 'participantLeft',\n    'video-ready-to-close': 'readyToClose',\n    'video-conference-joined': 'videoConferenceJoined',\n    'video-conference-left': 'videoConferenceLeft'\n};\n\n/**\n * Last id of api object\n * @type {number}\n */\nlet id = 0;\n\n/**\n * The minimum height for the Jitsi Meet frame\n * @type {number}\n */\nconst MIN_HEIGHT = 300;\n\n/**\n * The minimum width for the Jitsi Meet frame\n * @type {number}\n */\nconst MIN_WIDTH = 790;\n\n/**\n * Adds given number to the numberOfParticipants property of given APIInstance.\n *\n * @param {JitsiMeetExternalAPI} APIInstance - The instance of the API.\n * @param {int} number - The number of participants to be added to\n * numberOfParticipants property (this parameter can be negative number if the\n * numberOfParticipants should be decreased).\n * @returns {void}\n */\nfunction changeParticipantNumber(APIInstance, number) {\n    APIInstance.numberOfParticipants += number;\n}\n\n/**\n * Generates array with URL params based on the passed config object that will\n * be used for the Jitsi Meet URL generation.\n *\n * @param {Object} config - The config object.\n * @returns {Array<string>} The array with URL param strings.\n */\nfunction configToURLParamsArray(config = {}) {\n    const params = [];\n\n    for (const key in config) { // eslint-disable-line guard-for-in\n        try {\n            params.push(\n                `${key}=${encodeURIComponent(JSON.stringify(config[key]))}`);\n        } catch (e) {\n            console.warn(`Error encoding ${key}: ${e}`);\n        }\n    }\n\n    return params;\n}\n\n/**\n * Generates the URL for the iframe.\n *\n * @param {string} domain - The domain name of the server that hosts the\n * conference.\n * @param {string} [options] - Another optional parameters.\n * @param {Object} [options.configOverwrite] - Object containing configuration\n * options defined in config.js to be overridden.\n * @param {Object} [options.interfaceConfigOverwrite] - Object containing\n * configuration options defined in interface_config.js to be overridden.\n * @param {string} [options.jwt] - The JWT token if needed by jitsi-meet for\n * authentication.\n * @param {boolean} [options.noSsl] - If the value is true https won't be used.\n * @param {string} [options.roomName] - The name of the room to join.\n * @returns {string} The URL.\n */\nfunction generateURL(domain, options = {}) {\n    const {\n        configOverwrite,\n        interfaceConfigOverwrite,\n        jwt,\n        noSSL,\n        roomName\n    } = options;\n\n    let url = `${noSSL ? 'http' : 'https'}://${domain}/${roomName || ''}`;\n\n    if (jwt) {\n        url += `?jwt=${jwt}`;\n    }\n\n    url += `#jitsi_meet_external_api_id=${id}`;\n\n    const configURLParams = configToURLParamsArray(configOverwrite);\n\n    if (configURLParams.length) {\n        url += `&config.${configURLParams.join('&config.')}`;\n    }\n\n    const interfaceConfigURLParams\n        = configToURLParamsArray(interfaceConfigOverwrite);\n\n    if (interfaceConfigURLParams.length) {\n        url += `&interfaceConfig.${\n            interfaceConfigURLParams.join('&interfaceConfig.')}`;\n    }\n\n    return url;\n}\n\n/**\n * The IFrame API interface class.\n */\nexport default class JitsiMeetExternalAPI extends EventEmitter {\n    /**\n     * Constructs new API instance. Creates iframe and loads Jitsi Meet in it.\n     *\n     * @param {string} domain - The domain name of the server that hosts the\n     * conference.\n     * @param {string} [roomName] - The name of the room to join.\n     * @param {number} [width] - Width of the iframe.\n     * @param {number} [height] - Height of the iframe.\n     * @param {DOMElement} [parentNode] - The node that will contain the\n     * iframe.\n     * @param {Object} [configOverwrite] - Object containing configuration\n     * options defined in config.js to be overridden.\n     * @param {Object} [interfaceConfigOverwrite] - Object containing\n     * configuration options defined in interface_config.js to be overridden.\n     * @param {boolean} [noSSL] - If the value is true https won't be used.\n     * @param {string} [jwt] - The JWT token if needed by jitsi-meet for\n     * authentication.\n     */\n    constructor(domain, // eslint-disable-line max-params\n        roomName = '',\n        width = MIN_WIDTH,\n        height = MIN_HEIGHT,\n        parentNode = document.body,\n        configOverwrite = {},\n        interfaceConfigOverwrite = {},\n        noSSL = false,\n        jwt = undefined) {\n        super();\n        this.parentNode = parentNode;\n        this.url = generateURL(domain, {\n            configOverwrite,\n            interfaceConfigOverwrite,\n            jwt,\n            noSSL,\n            roomName\n        });\n        this._createIFrame(Math.max(height, MIN_HEIGHT),\n            Math.max(width, MIN_WIDTH));\n        this._transport = new Transport({\n            backend: new PostMessageTransportBackend({\n                postisOptions: {\n                    scope: `jitsi_meet_external_api_${id}`,\n                    window: this.frame.contentWindow\n                }\n            })\n        });\n        this.numberOfParticipants = 1;\n        this._setupListeners();\n        id++;\n    }\n\n    /**\n     * Creates the iframe element.\n     *\n     * @param {number} height - The height of the iframe.\n     * @param {number} width - The with of the iframe.\n     * @returns {void}\n     *\n     * @private\n     */\n    _createIFrame(height, width) {\n        this.iframeHolder\n            = this.parentNode.appendChild(document.createElement('div'));\n        this.iframeHolder.id = `jitsiConference${id}`;\n        this.iframeHolder.style.width = `${width}px`;\n        this.iframeHolder.style.height = `${height}px`;\n\n        this.frameName = `jitsiConferenceFrame${id}`;\n\n        this.frame = document.createElement('iframe');\n        this.frame.src = this.url;\n        this.frame.name = this.frameName;\n        this.frame.id = this.frameName;\n        this.frame.width = '100%';\n        this.frame.height = '100%';\n        this.frame.setAttribute('allowFullScreen', 'true');\n        this.frame = this.iframeHolder.appendChild(this.frame);\n    }\n\n    /**\n     * Setups listeners that are used internally for JitsiMeetExternalAPI.\n     *\n     * @returns {void}\n     *\n     * @private\n     */\n    _setupListeners() {\n\n        this._transport.on('event', ({ name, ...data }) => {\n            if (name === 'participant-joined') {\n                changeParticipantNumber(this, 1);\n            } else if (name === 'participant-left') {\n                changeParticipantNumber(this, -1);\n            }\n\n            const eventName = events[name];\n\n            if (eventName) {\n                this.emit(eventName, data);\n\n                return true;\n            }\n\n            return false;\n        });\n    }\n\n    /**\n     * Adds event listener to Meet Jitsi.\n     *\n     * @param {string} event - The name of the event.\n     * @param {Function} listener - The listener.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    addEventListener(event, listener) {\n        this.on(event, listener);\n    }\n\n    /**\n     * Adds event listeners to Meet Jitsi.\n     *\n     * @param {Object} listeners - The object key should be the name of\n     * the event and value - the listener.\n     * Currently we support the following\n     * events:\n     * incomingMessage - receives event notifications about incoming\n     * messages. The listener will receive object with the following structure:\n     * {{\n     *  'from': from,//JID of the user that sent the message\n     *  'nick': nick,//the nickname of the user that sent the message\n     *  'message': txt//the text of the message\n     * }}\n     * outgoingMessage - receives event notifications about outgoing\n     * messages. The listener will receive object with the following structure:\n     * {{\n     *  'message': txt//the text of the message\n     * }}\n     * displayNameChanged - receives event notifications about display name\n     * change. The listener will receive object with the following structure:\n     * {{\n     * jid: jid,//the JID of the participant that changed his display name\n     * displayname: displayName //the new display name\n     * }}\n     * participantJoined - receives event notifications about new participant.\n     * The listener will receive object with the following structure:\n     * {{\n     * jid: jid //the jid of the participant\n     * }}\n     * participantLeft - receives event notifications about the participant that\n     * left the room.\n     * The listener will receive object with the following structure:\n     * {{\n     * jid: jid //the jid of the participant\n     * }}\n     * video-conference-joined - receives event notifications about the local\n     * user has successfully joined the video conference.\n     * The listener will receive object with the following structure:\n     * {{\n     * roomName: room //the room name of the conference\n     * }}\n     * video-conference-left - receives event notifications about the local user\n     * has left the video conference.\n     * The listener will receive object with the following structure:\n     * {{\n     * roomName: room //the room name of the conference\n     * }}\n     * readyToClose - all hangup operations are completed and Jitsi Meet is\n     * ready to be disposed.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    addEventListeners(listeners) {\n        for (const event in listeners) { // eslint-disable-line guard-for-in\n            this.addEventListener(event, listeners[event]);\n        }\n    }\n\n    /**\n     * Removes the listeners and removes the Jitsi Meet frame.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._transport.dispose();\n        this.removeAllListeners();\n        if (this.iframeHolder) {\n            this.iframeHolder.parentNode.removeChild(this.iframeHolder);\n        }\n    }\n\n    /**\n     * Executes command. The available commands are:\n     * displayName - sets the display name of the local participant to the value\n     * passed in the arguments array.\n     * toggleAudio - mutes / unmutes audio with no arguments.\n     * toggleVideo - mutes / unmutes video with no arguments.\n     * toggleFilmStrip - hides / shows the filmstrip with no arguments.\n     * If the command doesn't require any arguments the parameter should be set\n     * to empty array or it may be omitted.\n     *\n     * @param {string} name - The name of the command.\n     * @returns {void}\n     */\n    executeCommand(name, ...args) {\n        if (!(name in commands)) {\n            logger.error('Not supported command name.');\n\n            return;\n        }\n        this._transport.sendEvent({\n            data: args,\n            name: commands[name]\n        });\n    }\n\n    /**\n     * Executes commands. The available commands are:\n     * displayName - sets the display name of the local participant to the value\n     * passed in the arguments array.\n     * toggleAudio - mutes / unmutes audio. no arguments\n     * toggleVideo - mutes / unmutes video. no arguments\n     * toggleFilmStrip - hides / shows the filmstrip. no arguments\n     * toggleChat - hides / shows chat. no arguments.\n     * toggleContactList - hides / shows contact list. no arguments.\n     * toggleShareScreen - starts / stops screen sharing. no arguments.\n     *\n     * @param {Object} commandList - The object with commands to be executed.\n     * The keys of the object are the commands that will be executed and the\n     * values are the arguments for the command.\n     * @returns {void}\n     */\n    executeCommands(commandList) {\n        for (const key in commandList) { // eslint-disable-line guard-for-in\n            this.executeCommand(key, commandList[key]);\n        }\n    }\n\n    /**\n     * Returns the number of participants in the conference. The local\n     * participant is included.\n     *\n     * @returns {int} The number of participants in the conference.\n     */\n    getNumberOfParticipants() {\n        return this.numberOfParticipants;\n    }\n\n    /**\n     * Removes event listener.\n     *\n     * @param {string} event - The name of the event.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    removeEventListener(event) {\n        this.removeAllListeners(event);\n    }\n\n    /**\n     * Removes event listeners.\n     *\n     * @param {Array<string>} eventList - Array with the names of the events.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    removeEventListeners(eventList) {\n        eventList.forEach(event => this.removeEventListener(event));\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./modules/API/external/external_api.js","// XXX The function parseURLParams is exported by the feature base/config (as\n// defined in the terminology of react/). However, this file is (very likely)\n// bundled in external_api in addition to app.bundle and, consequently, it is\n// best to import as little as possible here (rather than the whole feature\n// base/config) in order to minimize the amount of source code bundled into\n// multiple bundles.\nimport parseURLParams from '../../react/features/base/config/parseURLParams';\n\n/**\n * JitsiMeetExternalAPI id - unique for a webpage.\n */\nexport const API_ID\n    = parseURLParams(window.location).jitsi_meet_external_api_id;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/API/constants.js","// For legacy purposes, preserve the UMD of the public API of Jitsi Meet\n// external API (a.k.a. JitsiMeetExternalAPI).\nmodule.exports = require('./external_api').default;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/API/external/index.js","import Postis from 'postis';\n\n/**\n * The default options for postis.\n *\n * @type {Object}\n */\nconst DEFAULT_POSTIS_OPTIONS = {\n    window: window.opener || window.parent\n};\n\n/**\n * The list of methods of incoming postis messages that we have to support for\n * backward compatibility for the users that are directly sending messages to\n * Jitsi Meet (without using external_api.js)\n *\n * @type {string[]}\n */\nconst LEGACY_INCOMING_METHODS = [\n    'avatar-url',\n    'display-name',\n    'email',\n    'toggle-audio',\n    'toggle-chat',\n    'toggle-contact-list',\n    'toggle-film-strip',\n    'toggle-share-screen',\n    'toggle-video',\n    'video-hangup'\n];\n\n/**\n * The list of methods of outgoing postis messages that we have to support for\n * backward compatibility for the users that are directly listening to the\n * postis messages send by Jitsi Meet(without using external_api.js).\n *\n * @type {string[]}\n */\nconst LEGACY_OUTGOING_METHODS = [\n    'display-name-change',\n    'incoming-message',\n    'outgoing-message',\n    'participant-joined',\n    'participant-left',\n    'video-conference-joined',\n    'video-conference-left',\n    'video-ready-to-close'\n];\n\n/**\n * The postis method used for all messages.\n *\n * @type {string}\n */\nconst POSTIS_METHOD_NAME = 'message';\n\n/**\n * Implements message transport using the postMessage API.\n */\nexport default class PostMessageTransportBackend {\n    /**\n     * Creates new PostMessageTransportBackend instance.\n     *\n     * @param {Object} options - Optional parameters for configuration of the\n     * transport.\n     */\n    constructor({ enableLegacyFormat, postisOptions } = {}) {\n        this.postis = Postis({\n            ...DEFAULT_POSTIS_OPTIONS,\n            ...postisOptions\n        });\n\n        /**\n         * If true PostMessageTransportBackend will process and send messages\n         * using the legacy format and in the same time the current format.\n         * Otherwise all messages (outgoing and incoming) that are using the\n         * legacy format will be ignored.\n         *\n         * @type {boolean}\n         */\n        this._enableLegacyFormat = enableLegacyFormat;\n\n        if (this._enableLegacyFormat) {\n            // backward compatibility\n            LEGACY_INCOMING_METHODS.forEach(method =>\n                this.postis.listen(\n                    method,\n                    params =>\n                        this._legacyMessageReceivedCallback(method, params)\n                )\n            );\n        }\n\n        this._receiveCallback = () => {\n            // Do nothing until a callback is set by the consumer of\n            // PostMessageTransportBackend via setReceiveCallback.\n        };\n\n        this.postis.listen(\n            POSTIS_METHOD_NAME,\n            message => this._receiveCallback(message));\n    }\n\n    /**\n     * Handles incoming legacy postis messages.\n     *\n     * @param {string} method - The method property from the postis message.\n     * @param {Any} params - The params property from the postis message.\n     * @returns {void}\n     */\n    _legacyMessageReceivedCallback(method, params = {}) {\n        this._receiveCallback({\n            data: {\n                name: method,\n                data: params\n            }\n        });\n    }\n\n    /**\n     * Sends the passed message via postis using the old format.\n     *\n     * @param {Object} legacyMessage - The message to be sent.\n     * @returns {void}\n     */\n    _sendLegacyMessage({ name, ...data }) {\n        if (name && LEGACY_OUTGOING_METHODS.indexOf(name) !== -1) {\n            this.postis.send({\n                method: name,\n                params: data\n            });\n        }\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this.postis.destroy();\n    }\n\n    /**\n     * Sends the passed message.\n     *\n     * @param {Object} message - The message to be sent.\n     * @returns {void}\n     */\n    send(message) {\n        this.postis.send({\n            method: POSTIS_METHOD_NAME,\n            params: message\n        });\n\n        if (this._enableLegacyFormat) {\n            // For the legacy use case we don't need any new fields defined in\n            // Transport class. That's why we are passing only the original\n            // object passed by the consumer of the Transport class which is\n            // message.data.\n            this._sendLegacyMessage(message.data);\n        }\n    }\n\n    /**\n     * Sets the callback for receiving data.\n     *\n     * @param {Function} callback - The new callback.\n     * @returns {void}\n     */\n    setReceiveCallback(callback) {\n        this._receiveCallback = callback;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./modules/transport/PostMessageTransportBackend.js","import {\n    MESSAGE_TYPE_EVENT,\n    MESSAGE_TYPE_REQUEST,\n    MESSAGE_TYPE_RESPONSE\n} from './constants';\n\n/**\n * Stores the currnet transport backend that have to be used. Also implements\n * request/response mechanism.\n */\nexport default class Transport {\n    /**\n     * Creates new instance.\n     *\n     * @param {Object} options - Optional parameters for configuration of the\n     * transport backend.\n     */\n    constructor({ backend } = {}) {\n        /**\n         * Maps an event name and listener that have been added to the Transport\n         * instance.\n         *\n         * @type {Map<string, Function>}\n         */\n        this._listeners = new Map();\n\n        /**\n         * The request ID counter used for the id property of the request. This\n         * property is used to match the responses with the request.\n         *\n         * @type {number}\n         */\n        this._requestID = 0;\n\n        /**\n         * Maps an IDs of the requests and handlers that will process the\n         * responses of those requests.\n         *\n         * @type {Map<number, Function>}\n         */\n        this._responseHandlers = new Map();\n\n        /**\n         * A set with the events and requests that were received but not\n         * processed by any listener. They are later passed on every new\n         * listener until they are processed.\n         *\n         * @type {Set<Object>}\n         */\n        this._unprocessedMessages = new Set();\n\n        /**\n         * Alias.\n         */\n        this.addListener = this.on;\n\n        if (backend) {\n            this.setBackend(backend);\n        }\n    }\n\n    /**\n     * Disposes the current transport backend.\n     *\n     * @returns {void}\n     */\n    _disposeBackend() {\n        if (this._backend) {\n            this._backend.dispose();\n            this._backend = null;\n        }\n    }\n\n    /**\n     * Handles incoming messages from the transport backend.\n     *\n     * @param {Object} message - The message.\n     * @returns {void}\n     */\n    _onMessageReceived(message) {\n        if (message.type === MESSAGE_TYPE_RESPONSE) {\n            const handler = this._responseHandlers.get(message.id);\n\n            if (handler) {\n                handler(message);\n                this._responseHandlers.delete(message.id);\n            }\n        } else if (message.type === MESSAGE_TYPE_REQUEST) {\n            this.emit('request', message.data, (result, error) => {\n                this._backend.send({\n                    type: MESSAGE_TYPE_RESPONSE,\n                    error,\n                    id: message.id,\n                    result\n                });\n            });\n        } else {\n            this.emit('event', message.data);\n        }\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._responseHandlers.clear();\n        this._unprocessedMessages.clear();\n        this.removeAllListeners();\n        this._disposeBackend();\n    }\n\n    /**\n     * Calls each of the listeners registered for the event named eventName, in\n     * the order they were registered, passing the supplied arguments to each.\n     *\n     * @param {string} eventName -  The name of the event.\n     * @returns {boolean} True if the event has been processed by any listener,\n     * false otherwise.\n     */\n    emit(eventName, ...args) {\n        const listenersForEvent = this._listeners.get(eventName);\n        let isProcessed = false;\n\n        if (listenersForEvent && listenersForEvent.size) {\n            listenersForEvent.forEach(listener => {\n                isProcessed = listener(...args) || isProcessed;\n            });\n        }\n\n        if (!isProcessed) {\n            this._unprocessedMessages.add(args);\n        }\n\n        return isProcessed;\n    }\n\n    /**\n     * Adds the listener function to the listeners collection for the event\n     * named eventName.\n     *\n     * @param {string} eventName -  The name of the event.\n     * @param {Function} listener - The listener that will be added.\n     * @returns {Transport} References to the instance of Transport class, so\n     * that calls can be chained.\n     */\n    on(eventName, listener) {\n        let listenersForEvent = this._listeners.get(eventName);\n\n        if (!listenersForEvent) {\n            listenersForEvent = new Set();\n            this._listeners.set(eventName, listenersForEvent);\n        }\n\n        listenersForEvent.add(listener);\n\n        this._unprocessedMessages.forEach(args => {\n            if (listener(...args)) {\n                this._unprocessedMessages.delete(args);\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * Removes all listeners, or those of the specified eventName.\n     *\n     * @param {string} [eventName] - The name of the event. If this parameter is\n     * not specified all listeners will be removed.\n     * @returns {Transport} References to the instance of Transport class, so\n     * that calls can be chained.\n     */\n    removeAllListeners(eventName) {\n        if (eventName) {\n            this._listeners.delete(eventName);\n        } else {\n            this._listeners.clear();\n        }\n\n        return this;\n    }\n\n    /**\n     * Removes the listener function from the listeners collection for the event\n     * named eventName.\n     *\n     * @param {string} eventName -  The name of the event.\n     * @param {Function} listener - The listener that will be removed.\n     * @returns {Transport} References to the instance of Transport class, so\n     * that calls can be chained.\n     */\n    removeListener(eventName, listener) {\n        const listenersForEvent = this._listeners.get(eventName);\n\n        if (listenersForEvent) {\n            listenersForEvent.delete(listener);\n        }\n\n        return this;\n    }\n\n    /**\n     * Sends the passed event.\n     *\n     * @param {Object} event - The event to be sent.\n     * @returns {void}\n     */\n    sendEvent(event = {}) {\n        if (this._backend) {\n            this._backend.send({\n                type: MESSAGE_TYPE_EVENT,\n                data: event\n            });\n        }\n    }\n\n    /**\n     * Sending request.\n     *\n     * @param {Object} request - The request to be sent.\n     * @returns {Promise}\n     */\n    sendRequest(request) {\n        if (!this._backend) {\n            return Promise.reject(new Error('No transport backend defined!'));\n        }\n\n        this._requestID++;\n\n        const id = this._requestID;\n\n        return new Promise((resolve, reject) => {\n            this._responseHandlers.set(id, ({ error, result }) => {\n                if (typeof result !== 'undefined') {\n                    resolve(result);\n\n                // eslint-disable-next-line no-negated-condition\n                } else if (typeof error !== 'undefined') {\n                    reject(error);\n                } else { // no response\n                    reject(new Error('Unexpected response format!'));\n                }\n            });\n\n            this._backend.send({\n                type: MESSAGE_TYPE_REQUEST,\n                data: request,\n                id\n            });\n        });\n    }\n\n    /**\n     * Changes the current backend transport.\n     *\n     * @param {Object} backend - The new transport backend that will be used.\n     * @returns {void}\n     */\n    setBackend(backend) {\n        this._disposeBackend();\n\n        this._backend = backend;\n        this._backend.setReceiveCallback(this._onMessageReceived.bind(this));\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./modules/transport/Transport.js","/**\n * The message type for events.\n *\n * @type {string}\n */\nexport const MESSAGE_TYPE_EVENT = 'event';\n\n/**\n * The message type for requests.\n *\n * @type {string}\n */\nexport const MESSAGE_TYPE_REQUEST = 'request';\n\n/**\n * The message type for responses.\n *\n * @type {string}\n */\nexport const MESSAGE_TYPE_RESPONSE = 'response';\n\n\n\n// WEBPACK FOOTER //\n// ./modules/transport/constants.js","// FIXME: change to '../API' when we update to webpack2. If we do this now all\n// files from API modules will be included in external_api.js.\nimport { API_ID } from '../API/constants';\nimport { getJitsiMeetGlobalNS } from '../util/helpers';\n\nimport PostMessageTransportBackend from './PostMessageTransportBackend';\nimport Transport from './Transport';\n\nexport {\n    PostMessageTransportBackend,\n    Transport\n};\n\n/**\n * Option for the default low level transport.\n *\n * @type {Object}\n */\nconst postisOptions = {};\n\nif (typeof API_ID === 'number') {\n    postisOptions.scope = `jitsi_meet_external_api_${API_ID}`;\n}\n\n/**\n * The instance of Transport class that will be used by Jitsi Meet.\n *\n * @type {Transport}\n */\nlet transport;\n\n/**\n * Returns the instance of Transport class that will be used by Jitsi Meet.\n *\n * @returns {Transport}\n */\nexport function getJitsiMeetTransport() {\n    if (!transport) {\n        transport = new Transport({\n            backend: new PostMessageTransportBackend({\n                enableLegacyFormat: true,\n                postisOptions\n            })\n        });\n    }\n\n    return transport;\n}\n\n/**\n * Sets the transport to passed transport.\n *\n * @param {Object} externalTransportBackend - The new transport.\n * @returns {void}\n */\ngetJitsiMeetGlobalNS().setExternalTransportBackend = externalTransportBackend =>\n    transport.setBackend(externalTransportBackend);\n\n\n\n// WEBPACK FOOTER //\n// ./modules/transport/index.js","const logger = require(\"jitsi-meet-logger\").getLogger(__filename);\n\n/**\n * Create deferred object.\n *\n * @returns {{promise, resolve, reject}}\n */\nexport function createDeferred() {\n    const deferred = {};\n\n    deferred.promise = new Promise((resolve, reject) => {\n        deferred.resolve = resolve;\n        deferred.reject = reject;\n    });\n\n    return deferred;\n}\n\n/**\n * Creates a debounced function that delays invoking func until after wait\n * milliseconds have elapsed since the last time the debounced function was\n * invoked.\n *\n * @param fn\n * @param wait\n * @param options\n * @returns {function(...[*])}\n */\nexport function debounce(fn, wait = 0, options = {}) {\n    const leading = options.leading || false;\n    const trailing\n        = (typeof options.trailing === 'undefined') || options.trailing;\n    let called = false;\n\n    return (...args) => {\n        if (!called) {\n            leading && fn(...args);\n\n            setTimeout(() => {\n                called = false;\n                trailing && fn(...args);\n            }, wait);\n\n            called = true;\n        }\n    };\n}\n\n/**\n * Returns the namespace for all global variables, functions, etc that we need.\n *\n * @returns {Object} the namespace.\n *\n * NOTE: After React-ifying everything this should be the only global.\n */\nexport function getJitsiMeetGlobalNS() {\n    if (!window.JitsiMeetJS) {\n        window.JitsiMeetJS = {};\n    }\n    if (!window.JitsiMeetJS.app) {\n        window.JitsiMeetJS.app = {};\n    }\n    return window.JitsiMeetJS.app;\n}\n\n/**\n * Reload page.\n */\nexport function reload() {\n    window.location.reload();\n}\n\n/**\n * Redirects to a specific new URL by replacing the current location (in the\n * history).\n *\n * @param {string} url the URL pointing to the location where the user should\n * be redirected to.\n */\nexport function replace(url) {\n    window.location.replace(url);\n}\n\n/**\n * Prints the error and reports it to the global error handler.\n *\n * @param e {Error} the error\n * @param msg {string} [optional] the message printed in addition to the error\n */\nexport function reportError(e, msg = \"\") {\n    logger.error(msg, e);\n    window.onerror && window.onerror(msg, null, null, null, e);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./modules/util/helpers.js","/* @flow */\n\n/**\n * Parses the parameters from the URL and returns them as a JS object.\n *\n * @param {string} url - The URL to parse.\n * @param {boolean} dontParse - If false or undefined some transformations\n * (for parsing the value as JSON) are going to be executed.\n * @param {string} source - Values - \"hash\"/\"search\" if \"search\" the parameters\n * will parsed from location.search otherwise from location.hash.\n * @returns {Object}\n */\nexport default function parseURLParams(\n        url: URL,\n        dontParse: boolean = false,\n        source: string = 'hash'): Object {\n    const paramStr = source === 'search' ? url.search : url.hash;\n    const params = {};\n\n    // eslint-disable-next-line newline-per-chained-call\n    paramStr && paramStr.substr(1).split('&').forEach(part => {\n        const param = part.split('=');\n        const key = param[0];\n\n        if (!key) {\n            return;\n        }\n\n        let value;\n\n        try {\n            value = param[1];\n            if (!dontParse) {\n                value\n                    = JSON.parse(decodeURIComponent(value).replace(/\\\\&/, '&'));\n            }\n        } catch (e) {\n            const msg = `Failed to parse URL parameter value: ${String(value)}`;\n\n            console.warn(msg, e);\n            window.onerror && window.onerror(msg, null, null, null, e);\n\n            return;\n        }\n        params[key] = value;\n    });\n\n    return params;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./react/features/base/config/parseURLParams.js","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/events/events.js\n// module id = 11\n// module chunks = 0","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects\n        = options && options.stringifyObjects\n            ? options.stringifyObjects : false;\n    this.storeInterval\n        = options && options.storeInterval\n            ? options.storeInterval: 30000;\n    this.maxEntryLength\n        = options && options.maxEntryLength\n            ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function (logLevel) {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return \"[object with circular refs?]\";\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage\n= function (logLevel/*, arg1, arg2, arg3... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR)\n            && typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i != len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage\n            = this.queue.length ? this.queue[this.queue.length -1] : undefined;\n        // NOTE that typeof undefined is 'undefined'\n        var prevMessageText\n            = typeof prevMessage === 'object' ? prevMessage.text : prevMessage;\n        // Is it the same as the previous one ?\n        if (prevMessageText == msg) {\n            if (typeof prevMessage === 'object') {\n                prevMessage.count += 1;\n            } else {\n                this.queue[this.queue.length-1] = {\n                    text: msg,\n                    count: 2\n                }\n            }\n        } else {\n            this.queue.push(msg);\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID\n        = window.setTimeout(\n            this._flush.bind(\n                this, false /* do not force */, true /* reschedule */),\n            this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ )\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/jitsi-meet-logger/lib/LogCollector.js\n// module id = 12\n// module chunks = 0","function Postis(options) {\n  var scope = options.scope;\n  var targetWindow = options.window;\n  var windowForEventListening = options.windowForEventListening || window;\n  var listeners = {};\n  var sendBuffer = [];\n  var listenBuffer = {};\n  var ready = false;\n  var readyMethod = \"__ready__\";\n  var readynessCheck;\n\n  var listener = function(event) {\n    var data;\n    try {\n      data = JSON.parse(event.data);\n    } catch (e) {\n      return;\n    }\n\n    if (data.postis && data.scope === scope) {\n      var listenersForMethod = listeners[data.method];\n      if (listenersForMethod) {\n        for (var i = 0; i < listenersForMethod.length; i++) {\n          listenersForMethod[i].call(null, data.params);\n        }\n      } else {\n        listenBuffer[data.method] = listenBuffer[data.method] || [];\n        listenBuffer[data.method].push(data.params);\n      }\n    }\n  };\n\n  windowForEventListening.addEventListener(\"message\", listener, false);\n\n  var postis = {\n    listen: function (method, callback) {\n      listeners[method] = listeners[method] || [];\n      listeners[method].push(callback);\n\n      var listenBufferForMethod = listenBuffer[method];\n      if (listenBufferForMethod) {\n        var listenersForMethod = listeners[method];\n        for (var i = 0; i < listenersForMethod.length; i++) {\n          for (var j = 0; j < listenBufferForMethod.length; j++) {\n            listenersForMethod[i].call(null, listenBufferForMethod[j]);\n          }\n        }\n      }\n      delete listenBuffer[method];\n    },\n\n    send: function (opts) {\n      var method = opts.method;\n\n      if ((ready || opts.method === readyMethod) && (targetWindow && typeof targetWindow.postMessage === \"function\")) {\n        targetWindow.postMessage(JSON.stringify({\n          postis: true,\n          scope: scope,\n          method: method,\n          params: opts.params\n        }), \"*\");\n      } else {\n        sendBuffer.push(opts);\n      }\n    },\n\n    ready: function (callback) {\n      if (ready) {\n        callback();\n      } else {\n        setTimeout(function () { postis.ready(callback); }, 50);\n      }\n    },\n\n    destroy: function (callback) {\n      clearInterval(readynessCheck);\n      ready = false;\n      if (windowForEventListening && typeof windowForEventListening.removeEventListener === \"function\") {\n        windowForEventListening.removeEventListener(\"message\", listener);\n      }\n      callback && callback();\n    }\n  };\n\n  var readyCheckID = +new Date() + Math.random() + \"\";\n\n  readynessCheck = setInterval(function () {\n    postis.send({\n      method: readyMethod,\n      params: readyCheckID\n    });\n  }, 50);\n\n  postis.listen(readyMethod, function (id) {\n    if (id === readyCheckID) {\n      clearInterval(readynessCheck);\n      ready = true;\n\n      for (var i = 0; i < sendBuffer.length; i++) {\n        postis.send(sendBuffer[i]);\n      }\n      sendBuffer = [];\n    } else {\n      postis.send({\n        method: readyMethod,\n        params: id\n      });\n    }\n  });\n\n  return postis;\n}\n\nmodule.exports = Postis;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/postis/src/index.js\n// module id = 13\n// module chunks = 0"],"sourceRoot":""}